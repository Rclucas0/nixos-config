#+title: NixOS Flake Configuration
#+author: Riley Lucas
#+description: What NixOS is and my configuration


* TABLE OF CONTENTS :toc@3:
- [[#what-is-nixos][What Is NixOS]]
- [[#useful-nix-commands][Useful Nix Commands]]
- [[#what-are-nix-flakes][What Are Nix Flakes]]
- [[#my-nix-flake][My Nix Flake]]
  - [[#flakenix-configuration][Flake.nix Configuration]]
  - [[#homenix-configuration][Home.nix Configuration]]
    - [[#starshipnix][Starship.nix]]
    - [[#sxhkd-config][Sxhkd Config]]
    - [[#bash-config][Bash Config]]
    - [[#rofi-config][Rofi Config]]
    - [[#gtk-themeing][Gtk Themeing]]
    - [[#hyprland][Hyprland]]
  - [[#configurationnix][Configuration.nix]]
    - [[#link-to-config-systemreadmeorg][Link to Config [[./system/README.org]]]]
  - [[#dwm-configuration][Dwm Configuration]]
    - [[#link-to-config-userwmreadmeorg][Link to Config [[./user/wm/README.org]]]]

* What Is NixOS

- NixOS is a declarative system unlike most systems that you normally see to day which are imperative
- Only difference is that the system configurations other then user customization is all done in one file and is rebuilt on each install
- The configuration is written in a functional programming language called Nix

* Useful Nix Commands

- sudo nixos-rebuild switch/test
  * This command will reinstall the entire system and add a new entry to boot loader if used switch, test will do the same other than adding it to boot loader

- sudo nixos-rebuild switch/ test --flake ./path/to/flake.nix
  * Rebuilds the system with a flake rather than default configuration.nixos

- sudo nix-collect-garbage --delete-older-than 15d
  * Will remove unused packages and boot loader entries

* What Are Nix Flakes

From [[https://zero-to-nix.com/concepts/flakes][Zero to Nix]]

- A Nix flake is a directory with a flake.nix and flake.lock at the root that outputs Nix expressions that others can use to do things like build packages, run programs, use development environments, or stand up NixOS systems. If necessary, flakes can use the outputs of other flakes as inputs.

* My Nix Flake

- This is my current set up of NixOS using a flake to setup the main system
- I am also using emacs org-mode to set up most of this config and what you are reading now

[[./1mon-gruvbox-dwm.png]]

** Flake.nix Configuration

#+begin_src nix :tangle flake.nix
{
  description = "My Dwm Flake";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    home-manager.url = "github:nix-community/home-manager/master";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";
    nix-colors.url = "github:misterio77/nix-colors";
    hyprland.url = "github:hyprwm/Hyprland";
    hyprland-plugins = {
      url = "github:hyprwm/hyprland-plugins";
      inputs.hyprland.follows = "hyprland";
    };
  };
  outputs = inputs@{ nixpkgs, home-manager, ... }:
  let
    system = "x86_64-linux";

    # User Variables
    hostname = "nixos";
    username = "rileyl";
    gitUsername = "Riley Lucas";
    gitEmail = "rclucas0@gmail.com";
    flakeDir = "/home/${username}/nixos-config";
    theme = "oceanicnext";

    pkgs = import nixpkgs {
      inherit system;
      config = {
	    allowUnfree = true;
      };
    };
  in {
    nixosConfigurations = {
      "${hostname}" = nixpkgs.lib.nixosSystem {
	    specialArgs = {
          inherit system; inherit inputs;
          inherit username; inherit hostname;
          inherit gitUsername; inherit gitEmail;
          inherit flakeDir;
        };
	    modules = [ ./system/configuration.nix
          home-manager.nixosModules.home-manager {
	        home-manager.extraSpecialArgs = {
              inherit username; inherit gitEmail;
              inherit inputs; inherit gitUsername;
              inherit flakeDir; inherit theme;
              inherit (inputs.nix-colors.lib-contrib {inherit pkgs;}) gtkThemeFromScheme;
            };
	        home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.backupFileExtension = "backup";
	        home-manager.users.${username} = import ./home.nix;
	      }
	    ];
      };
    };
  };
}
#+end_src

** Home.nix Configuration

#+begin_src nix :tangle home.nix
{ gtkThemeFromScheme, config, pkgs, inputs, gitEmail, gitUsername, username, theme, ... }:
{
  home.username = "${username}";
  home.homeDirectory = "/home/${username}";
  home.stateVersion = "23.11"; # Please read the comment before changing.

  colorScheme = inputs.nix-colors.colorSchemes."${theme}";

  imports = [
   ./user/starship.nix
    ./user/bash.nix
    ./user/kitty.nix
    ./user/rofi.nix
    ./user/gtk-gt.nix
    ./user/hyprland.nix
    ./user/waybar.nix
    ./user/swaylock.nix
    ./user/swaync.nix
    inputs.nix-colors.homeManagerModules.default
    inputs.hyprland.homeManagerModules.default
  ];

  home.file.".config/rofi/rofi.jpg".source = ./user/rofi.jpg;
  home.file.".config/starship.toml".source = ./user/starship.toml;
  home.file.".config/sxhkd/sxhkdrc".source = ./user/sxhkdrc;
  home.file.".config/doom/" = {
    source = ./user/doom;
    recursive = true;
  };
  home.file.".config/stumpwm/" = {
    source = ./user/wm/stumpwm;
    recursive = true;
  };

  # Define Settings For Xresources
  xresources.properties = {
    "Xcursor.size" = 24;
  };

    # Install & Configure Git
  programs.git = {
    enable = true;
    userName = "${gitUsername}";
    userEmail = "${gitEmail}";
  };

  # Create XDG Dirs
  xdg = {
    userDirs = {
        enable = true;
        createDirectories = true;
    };
  };

  dconf.settings = {
    "org/virt-manager/virt-manager/connections" = {
      autoconnect = ["qemu:///system"];
      uris = ["qemu:///system"];
    };
  };

  programs.home-manager.enable = true;
}
#+end_src

*** Starship.nix

#+begin_src nix :tangle user/starship.nix
{ config, pkgs, ... }:

{
  programs.starship = {
    enable = true;
#    settings = {
#      aws.style = "bold #ffb86c";
#      cmd_duration.style = "bold #f1fa8c";
#      directory.style = "bold #50fa7b";
#      hostname.style = "bold #ff5555";
#      git_branch.style = "bold #ff79c6";
#      git_status.style = "bold #ff5555";
#      username = {
#        format = "[$user]($style) on ";
#        style_user = "bold #bd93f9";
#      };
#      character = {
#        success_symbol = "[](bold #f8f8f2)";
#        error_symbol = "[](bold #ff5555)";
#     };
#    };
  };
}

#+end_src

*** Sxhkd Config

#+begin_src bash :tangle user/sxhkdrc
super + BackSpace
	pkill -USR1 -x sxhkd

super + {_}{w,a,Return,e}
	{brave,st,kitty,emacsclient -c -a 'emacs'}

super + shift + {_}{d}
	{rofi -show drun}

alt + {_}{d,s,r,h,m,g}
	{discord,steam,dmenu_run,flatpak run com.heroicgameslauncher.hgl,prismlauncher,gimp}

alt + shift + {_}{p,Return}
	{pavucontrol,thunar}

ctrl + {_}{p}
	{flameshot gui}
#+end_src

*** Bash Config

#+begin_src nix :tangle user/bash.nix
{ config, pkgs, flakeDir, ... }:

{

  # Configure Bash
  programs.bash = {
    enable = true;
    enableCompletion = true;
    profileExtra = ''
      #if [ -z "$DISPLAY" ] && [ "$XDG_VTNR" = 1 ]; then
      #  exec Hyprland
      #fi
    '';

    initExtra = ''
      neofetch
      export PATH=$PATH:/home/$USER/.config/emacs/bin
      '';

    sessionVariables = {

    };

    shellAliases = {
      sv="sudo vim";
      flake-rebuild="sudo nixos-rebuild switch --flake ${flakeDir}";
      flake-update="sudo nix flake update ${flakeDir}";
      gcCleanup="nix-collect-garbage --delete-old && sudo nix-collect-garbage -d && sudo /run/current-system/bin/switch-to-configuration boot";
      v="vim";
      b="vim";
      nv="nvim";
      ls="lsd";
      ll="lsd -l";
      la="lsd -a";
      lal="lsd -al";
      ".."="cd ..";
    };
  };
}
#+end_src

*** Rofi Config

#+begin_src nix :tangle user/rofi.nix
{ pkgs, config, ... }:

let
  palette = config.colorScheme.palette;
in {
  home.file.".config/rofi/config.rasi".text = ''
    @theme "/dev/null"

    * {
        bg: #${palette.base00};
        background-color: @bg;
    }

    configuration {
	    show-icons: true;
	    icon-theme: "Papirus";
	    location: 0;
	    font: "Ubuntu 12";
	    display-drun: "Launch:";
    }

    window {
	    width: 35%;
	    transparency: "real";
	    orientation: vertical;
	    border-color: #${palette.base0B};
        border-radius: 10px;
    }

    mainbox {
	    children: [inputbar, listview];
    }


    // ELEMENT
    // -----------------------------------

    element {
	    padding: 4 12;
	    text-color: #${palette.base05};
        border-radius: 5px;
    }

    element selected {
	    text-color: #${palette.base01};
	    background-color: #${palette.base0B};
    }

    element-text {
	    background-color: inherit;
	    text-color: inherit;
    }

    element-icon {
	    size: 16 px;
	    background-color: inherit;
	    padding: 0 6 0 0;
	    alignment: vertical;
    }

    listview {
	    columns: 2;
	    lines: 9;
	    padding: 8 0;
	    fixed-height: true;
	    fixed-columns: true;
	    fixed-lines: true;
	    border: 0 10 6 10;
    }

    // INPUT BAR
    //------------------------------------------------

    entry {
	    text-color: #${palette.base05};
	    padding: 10 10 0 0;
	    margin: 0 -2 0 0;
    }

    inputbar {
	    background-image: url("~/.config/rofi/rofi.jpg", width);
	    padding: 180 0 0;
	    margin: 0 0 0 0;
    }

    prompt {
	    text-color: #${palette.base0D};
	    padding: 10 6 0 10;
	    margin: 0 -2 0 0;
    }
  '';
}
#+end_src

*** Gtk Themeing

#+begin_src nix :tangle user/gtk-gt.nix
{ pkgs, config, gtkThemeFromScheme, ... }:

{
  # Configure Cursor Theme
  home.pointerCursor = {
    gtk.enable = true;
    x11.enable = true;
    package = pkgs.bibata-cursors;
    name = "Bibata-Modern-Ice";
    size = 24;
  };

  # Theme GTK
  gtk = {
    enable = true;
    font = {
      name = "Hack";
      size = 12;
      package = pkgs.hack-font;
    };
    theme = {
      name = "${config.colorScheme.slug}";
      package = gtkThemeFromScheme {scheme = config.colorScheme;};
    };
    iconTheme = {
      name = "candy-icons";
      package = pkgs.candy-icons;
    };
    gtk3.extraConfig = {
      gtk-application-prefer-dark-theme=1;
    };
    gtk4.extraConfig = {
      gtk-application-prefer-dark-theme=1;
    };
  };

  # Theme QT -> GTK
  qt = {
    enable = true;
    platformTheme = "gtk";
    style = {
        name = "adwaita-dark";
        package = pkgs.adwaita-qt;
    };
  };
}
#+end_src

*** Hyprland

#+begin_src nix :tangle user/hyprland.nix
{ pkgs, config, lib, inputs, ... }:

let
  theme = config.colorScheme.palette;
  hyprplugins = inputs.hyprland-plugins.packages.${pkgs.system};
in with lib; {
  wayland.windowManager.hyprland = {
    enable = true;
    xwayland.enable = true;
    systemd.enable = true;
    plugins = [
      # hyprplugins.hyprtrails
    ];
    extraConfig = let
      modifier = "SUPER";
      modifier2 = "ALT";
    in concatStrings [ ''
      monitor=DP-1, 1920x1080, 0x0, 1
      monitor=DP-3, 1920x1080@240, 1920x0, 1

      windowrule = float, ^(steam)$
      windowrule = size 1080 900, ^(steam)$
      windowrule = center, ^(steam)$
      windowrule = workspace 7, ^(steam)$

      windowrule = opacity 0.85 0.85, ^(Emacs)$
      windowrule = workspace 2, ^(Emacs)$

      windowrule = workspace 1, ^(brave-browser)$

      windowrule = opacity 0.85 0.85, ^(discord)$
      windowrule = workspace 3, ^(discord)$

      windowrule = workspace special, ^(kitty)$
      windowrule = float, ^(kitty)$
      windowrule = size 1000 700, ^(kitty)$
      windowrule = center, ^(kitty)$

      general {
        gaps_in = 6
        gaps_out = 8
        border_size = 2
        col.active_border = rgba(${theme.base0C}ff) rgba(${theme.base0D}ff) rgba(${theme.base0B}ff) rgba(${theme.base0E}ff) 45deg
        col.inactive_border = rgba(${theme.base00}cc) rgba(${theme.base01}cc) 45deg
        layout = dwindle
        resize_on_border = true
      }

      input {
        kb_layout = us
	kb_options = grp:alt_shift_toggle
        kb_options=caps:ctrl_modifier
        follow_mouse = 1
        touchpad {
          natural_scroll = false
        }
        sensitivity = 0 # -1.0 - 1.0, 0 means no modification.
        accel_profile = flat
      }

      env = NIXOS_OZONE_WL, 1
      env = NIXPKGS_ALLOW_UNFREE, 1
      env = XDG_CURRENT_DESKTOP, Hyprland
      env = XDG_SESSION_TYPE, wayland
      env = XDG_SESSION_DESKTOP, Hyprland
      env = GDK_BACKEND, wayland
      env = CLUTTER_BACKEND, wayland
      env = QT_QPA_PLATFORM, wayland
      env = QT_WAYLAND_DISABLE_WINDOWDECORATION, 1
      env = QT_AUTO_SCREEN_SCALE_FACTOR, 1
      env = MOZ_ENABLE_WAYLAND, 1

      gestures {
        workspace_swipe = true
        workspace_swipe_fingers = 3
      }
      misc {
        mouse_move_enables_dpms = true
        key_press_enables_dpms = false
      }
      animations {
        enabled = yes
        bezier = wind, 0.05, 0.9, 0.1, 1.05
        bezier = winIn, 0.1, 1.1, 0.1, 1.1
        bezier = winOut, 0.3, -0.3, 0, 1
        bezier = liner, 1, 1, 1, 1
        animation = windows, 1, 6, wind, slide
        animation = windowsIn, 1, 6, winIn, slide
        animation = windowsOut, 1, 5, winOut, slide
        animation = windowsMove, 1, 5, wind, slide
        animation = border, 1, 1, liner
        animation = fade, 1, 10, default
        animation = workspaces, 1, 5, wind
      }
      decoration {
        rounding = 10
        drop_shadow = false
        blur {
            enabled = true
            size = 5
            passes = 3
            new_optimizations = on
            ignore_opacity = on
        }
      }
      plugin {
        hyprtrails {
          color = rgba(${theme.base0A}ff)
        }
      }

      exec-once = $POLKIT_BIN
      exec-once = dbus-update-activation-environment --systemd --all
      exec-once = systemctl --user import-environment QT_QPA_PLATFORMTHEME WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
      exec-once = swww init
      exec = swww img ~/Pictures/Wallpapers/0240.jpg
      exec-once = waybar
      exec-once = swaync
      exec-once = wallsetter
      exec-once = nm-applet --indicator
      exec-once = swayidle -w timeout 720 'swaylock -f' timeout 800 'hyprctl dispatch dpms off' resume 'hyprctl dispatch dpms on' before-sleep 'swaylock -f -c 000000'

      dwindle {
        pseudotile = true
        preserve_split = true
      }
      master {
        new_is_master = true
      }

      bind = ${modifier2},S,exec,steam
      bind = ${modifier},Return,exec,kitty
      bind = ${modifier},W,exec,brave
      bind = ${modifier},D,exec,discord
      bind = ${modifier},E,exec,emacsclient -c -a 'emacs'
      bind = ${modifier},O,exec,obs
      bind = ${modifier},G,exec,gimp
      bind = ${modifier},T,exec,thunar
      bind = ${modifier},Q,killactive,
      bind = ${modifier},P,pseudo,
      bind = ${modifier},F,fullscreen,
      bind = ${modifier}SHIFT,W,exec,web-search
      bind = ${modifier}SHIFT,Return,exec,rofi-launcher
      bind = ${modifier}SHIFT,S,exec,swaync-client -rs
      bind = ${modifier}SHIFT,I,togglesplit,
      bind = ${modifier}SHIFT,D,exec,rofi -show drun
      bind = ${modifier}SHIFT,F,togglefloating,
      bind = ${modifier}SHIFT,C,exit,
      bind = ${modifier}SHIFT,left,movewindow,l
      bind = ${modifier}SHIFT,right,movewindow,r
      bind = ${modifier}SHIFT,up,movewindow,u
      bind = ${modifier}SHIFT,down,movewindow,d
      bind = ${modifier}SHIFT,h,movewindow,l
      bind = ${modifier}SHIFT,l,movewindow,r
      bind = ${modifier}SHIFT,k,movewindow,u
      bind = ${modifier}SHIFT,j,movewindow,d
      bind = ${modifier},left,movefocus,l
      bind = ${modifier},right,movefocus,r
      bind = ${modifier},up,movefocus,u
      bind = ${modifier},down,movefocus,d
      bind = ${modifier},h,movefocus,l
      bind = ${modifier},l,movefocus,r
      bind = ${modifier},k,movefocus,u
      bind = ${modifier},j,movefocus,d
      bind = ${modifier},1,workspace,1
      bind = ${modifier},2,workspace,2
      bind = ${modifier},3,workspace,3
      bind = ${modifier},4,workspace,4
      bind = ${modifier},5,workspace,5
      bind = ${modifier},6,workspace,6
      bind = ${modifier},7,workspace,7
      bind = ${modifier},8,workspace,8
      bind = ${modifier},9,workspace,9
      bind = ${modifier},0,workspace,10
      bind = ${modifier},S,togglespecialworkspace,
      bind = ${modifier}SHIFT,S,movetoworkspace,special
      bind = ${modifier}SHIFT,1,movetoworkspace,1
      bind = ${modifier}SHIFT,2,movetoworkspace,2
      bind = ${modifier}SHIFT,3,movetoworkspace,3
      bind = ${modifier}SHIFT,4,movetoworkspace,4
      bind = ${modifier}SHIFT,5,movetoworkspace,5
      bind = ${modifier}SHIFT,6,movetoworkspace,6
      bind = ${modifier}SHIFT,7,movetoworkspace,7
      bind = ${modifier}SHIFT,8,movetoworkspace,8
      bind = ${modifier}SHIFT,9,movetoworkspace,9
      bind = ${modifier}SHIFT,0,movetoworkspace,10
      bind = ${modifier}CONTROL,right,workspace,e+1
      bind = ${modifier}CONTROL,left,workspace,e-1
      bind = ${modifier},mouse_down,workspace, e+1
      bind = ${modifier},mouse_up,workspace, e-1
      bindm = ${modifier},mouse:272,movewindow
      bindm = ${modifier},mouse:273,resizewindow
      bind = ALT,Tab,cyclenext
      bind = ALT,Tab,bringactivetotop
      bind = ,XF86AudioRaiseVolume,exec,wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
      bind = ,XF86AudioLowerVolume,exec,wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
      binde = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
      bind = ,XF86AudioPlay, exec, playerctl play-pause
      bind = ,XF86AudioPause, exec, playerctl play-pause
      bind = ,XF86AudioNext, exec, playerctl next
      bind = ,XF86AudioPrev, exec, playerctl previous
      bind = ,XF86MonBrightnessDown,exec,brightnessctl set 5%-
      bind = ,XF86MonBrightnessUp,exec,brightnessctl set +5%
    '' ];
  };
}
#+end_src

** Configuration.nix
*** Link to Config [[./system/README.org]]
** Dwm Configuration
*** Link to Config [[./user/wm/README.org]]
