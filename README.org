#+title: NixOS Flake Configuration
#+author: Riley Lucas
#+description: What NixOS is and my configuration


* TABLE OF CONTENTS :toc@4:
- [[#what-is-nixos][What Is NixOS]]
- [[#useful-nix-commands][Useful Nix Commands]]
- [[#what-are-nix-flakes][What Are Nix Flakes]]
- [[#my-current-nixos-configuration-using-nix-flakes][My Current NixOS Configuration Using Nix Flakes]]
- [[#flakenix-configuration][Flake.nix Configuration]]
- [[#configurationnix-configuration][Configuration.nix Configuration]]
  - [[#bluetoothnix-file][Bluetooth.nix File]]
  - [[#virt-managernix][Virt-manager.nix]]
  - [[#syspackagesnix-file][SysPackages.nix File]]
- [[#user-dotfiles][User Dotfiles]]
  - [[#homenix-configuration][Home.nix Configuration]]
    - [[#starshipnix][Starship.nix]]
    - [[#starship-config][Starship Config]]
    - [[#sxhkd-config][Sxhkd Config]]
- [[#link-to-dwm-configuration-files][Link To Dwm Configuration Files]]

* What Is NixOS

- NixOS is a declarative system unlike most systems that you normally see to day which are imperative
- Only difference is that the system configurations other then user customization is all done in one file and is rebuilt on each install
- The configuration is written in a functional programming language called Nix
- The Nix programming uses nix to create and nix package which is then used to

* Useful Nix Commands

- sudo nixos-rebuild switch/test
  * This command will reinstall the entire system and add a new entry to boot loader if used switch, test will do the same other than adding it to boot loader

- sudo nixos-rebuild switch/ test --flake ./path/to/flake.nix
  * Rebuilds the system with a flake rather than default configuration.nixos

- sudo nix-collect-garbage --delete-older-than 15d
  * Will remove unused packages and boot loader entries

* What Are Nix Flakes

From [[https://zero-to-nix.com/concepts/flakes][Zero to Nix]]

- A Nix flake is a directory with a flake.nix and flake.lock at the root that outputs Nix expressions that others can use to do things like build packages, run programs, use development environments, or stand up NixOS systems. If necessary, flakes can use the outputs of other flakes as inputs.

* My Current NixOS Configuration Using Nix Flakes

- This is my current set up of NixOS using a flake to setup the main system
- I am also using emacs org-mode to set up most of this config and what you are reading now

[[./1mon-gruvbox-dwm.png]]

* Flake.nix Configuration

#+begin_src nix :tangle ./flake.nix
{
  description = "My Nix Flake Configuration With Dwm";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-23.11";
    home-manager.url = "github:nix-community/home-manager/release-23.11";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";
  };

  outputs = { self, nixpkgs, home-manager, ... }:
  let
    lib = nixpkgs.lib;
    system = "x86_64-linux";
    pkgs = nixpkgs.legacyPackages.${system};

  in {
    nixosConfigurations = {
      nixos = lib.nixosSystem {
        inherit system;
        modules = [ ./profiles/personal-dwm/configuration.nix ];
      };
    };

    homeConfigurations = {
      rileyl = home-manager.lib.homeManagerConfiguration {
        inherit pkgs;
        modules = [ ./home.nix ];
      };
    };
  };
}
#+end_src

* Configuration.nix Configuration

#+begin_src nix :tangle ./profiles/personal-dwm/configuration.nix
{ config, pkgs, ... }:

{
  imports =
    [
      ../../system/hardware-configuration.nix
      ../../system/syspkgs.nix
      ../../system/bluetooth.nix
      ../../system/virt-manager.nix
      ../../user/wm/dwm.nix

    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "nixos";

  # Enable networking
  networking.networkmanager.enable = true;

  systemd = {
    user.services.polkit-gnome-authentication-agent-1 = {
      description = "polkit-gnome-authentication-agent-1";
      wantedBy = [ "graphical-session.target" ];
      wants = [ "graphical-session.target" ];
      after = [ "graphical-session.target" ];
      serviceConfig = {
        Type = "simple";
        ExecStart = "${pkgs.polkit_gnome}/libexec/polkit-gnome-authentication-agent-1";
        Restart = "on-failure";
        RestartSec = 1;
        TimeoutStopSec = 10;
      };
    };
  };

  security.polkit.enable = true;


  # Set your time zone.
  time.timeZone = "America/Chicago";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

  # Enable the X11 windowing system.
  services.xserver = {
    enable = true;
    libinput = {
      enable = true;
      mouse = {
        accelProfile = "flat";
      };
    };
  };

  # Enable the KDE Plasma Desktop Environment.
  services.xserver.displayManager.gdm.enable = true;
#  services.xserver.displayManager.sddm.enable = true;
#  services.xserver.desktopManager.plasma5.enable = true;

  # Configure keymap in X11
  services.xserver = {
    layout = "us";
    xkbVariant = "";
  };

  # Enable Flakes And Nix Commands
  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  # Enable sound with pipewire.
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
  };

  users.users.rileyl = {
    isNormalUser = true;
    description = "Riley Lucas";
    extraGroups = [ "networkmanager" "wheel" "libvirtd" "dialout" ];
    packages = with pkgs; [

    ];
  };

#  home-manager = {
#    extraSpecialArgs = { inherit inputs; }
#    users = {
#      "rileyl" = import ./home.nix;
#    };
#  };

  system.stateVersion = "23.11";
}
#+end_src

** Bluetooth.nix File

#+begin_src nix :tangle ./system/bluetooth.nix
{config, pkgs, ...}:
{
  # Enable Bluetooth and Start on Boot
  hardware.bluetooth.enable = true;
  hardware.bluetooth.powerOnBoot = true;
  services.blueman.enable = true;
}
#+end_src

** Virt-manager.nix

#+begin_src nix :tangle ./system/virt-manager.nix
{config, pkgs, ...}:
{
  # Virt-Manager
  virtualisation.libvirtd.enable = true;
  programs.virt-manager.enable = true;
}
#+end_src

** SysPackages.nix File

#+begin_src nix :tangle ./system/syspkgs.nix
{config, pkgs, ...}:

{
  # Enable Dconf
  programs.dconf.enable = true;

   # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # Enable Steam
  programs.steam = {
    enable = true;
    remotePlay.openFirewall = true;
    dedicatedServer.openFirewall = true;
  };

  # Enable and Start emacs daemon
  services.emacs = {
    enable = true;
    package = pkgs.emacs;
  };


  fonts.packages = with pkgs; [
    nerdfonts
    noto-fonts
    noto-fonts-cjk
    noto-fonts-emoji
    liberation_ttf
    font-awesome
    fira-code
    fira-code-symbols
    mplus-outline-fonts.githubRelease
    dina-font
    proggyfonts
  ];

  environment.systemPackages = with pkgs; [
    alacritty aspell aspellDicts.en
    brave btop bibata-cursors
    discord dunst dmenu
    dracula-icon-theme dracula-theme
    fd flameshot
    gparted gcc gruvbox-gtk-theme gruvbox-dark-icons-gtk git gimp gnumake gnome.adwaita-icon-theme
    htop
    ispell
    kitty
    libsForQt5.kdenlive libsForQt5.qt5ct lsd lxappearance
    mpv
    newsboat neofetch neovim neovide nitrogen
    obs-studio OVMF
    pavucontrol papirus-icon-theme picom prismlauncher polkit_gnome
    qemu_full
    rofi rose-pine-icon-theme ripgrep
    starship sxhkd slock steam st sweet swtpm
    tela-circle-icon-theme thonny thunderbird
    vim
    yt-dlp
    xfce.thunar
  ];
}
#+end_src

* User Dotfiles

- These are the files that are not controlled by the flake or by the base NixOS config
- Soon will be moved to a home-manager setup

** Home.nix Configuration

#+begin_src nix :tangle ./home.nix
{ config, pkgs, inputs, ... }:

{
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = "rileyl";
  home.homeDirectory = "/home/rileyl";
  home.stateVersion = "23.11"; # Please read the comment before changing.

  imports = [
    ./user/starship.nix

    ];



      # Install & Configure Git
  programs.git = {
    enable = true;
    userName = "Riley Lucas";
    userEmail = "rclucas0@gmail.com";
  };
  #  programs.starship = {
#    enable = true;
#    settings = {
#      aws.style = "bold #ffb86c";
#      cmd_duration.style = "bold #f1fa8c";
#      directory.style = "bold #50fa7b";
#      hostname.style = "bold #ff5555";
#      git_branch.style = "bold #ff79c6";
#      git_status.style = "bold #ff5555";
#      username = {
#        format = "[$user]($style) on ";
#        style_user = "bold #bd93f9";
#      };
#      character = {
#        success_symbol = "[](bold #f8f8f2)";
#        error_symbol = "[](bold #ff5555)";
#      };
#    };
#  };





  # The home.packages option allows you to install Nix packages into your
  # environment.
  home.packages = [
    # # Adds the 'hello' command to your environment. It prints a friendly
    # # "Hello, world!" when run.
    # pkgs.hello

    # # It is sometimes useful to fine-tune packages, for example, by applying
    # # overrides. You can do that directly here, just don't forget the
    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
    # # fonts?
    # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

    # # You can also create simple shell scripts directly inside your
    # # configuration. For example, this adds a command 'my-hello' to your
    # # environment:
    # (pkgs.writeShellScriptBin "my-hello" ''
    #   echo "Hello, ${config.home.username}!"
    # '')
  ];

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };

  # Home Manager can also manage your environment variables through
  # 'home.sessionVariables'. If you don't want to manage your shell through Home
  # Manager then you have to manually source 'hm-session-vars.sh' located at
  # either
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/rileyl/etc/profile.d/hm-session-vars.sh
  #
  home.sessionVariables = {
    # EDITOR = "emacs";
  };

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
}

#+end_src

*** Starship.nix

#+begin_src nix :tangle ./user/starship.nix
{ config, pkgs, ... }:

{
  programs.starship = {
    enable = true;
    settings = {
      aws.style = "bold #ffb86c";
      cmd_duration.style = "bold #f1fa8c";
      directory.style = "bold #50fa7b";
      hostname.style = "bold #ff5555";
      git_branch.style = "bold #ff79c6";
      git_status.style = "bold #ff5555";
      username = {
        format = "[$user]($style) on ";
        style_user = "bold #bd93f9";
      };
      character = {
        success_symbol = "[](bold #f8f8f2)";
        error_symbol = "[](bold #ff5555)";
      };
    };
  };
}

#+end_src

*** Starship Config

#+begin_src toml ~/.config/starship.toml
add_newline = true

[character]
error_symbol = "[➜](bold red)"
success_symbol = "[➜](bold blue)"

[package]
disabled = false
#+end_src

*** Sxhkd Config

#+begin_src bash :tangle ~/.config/sxhkd/sxhkdrc
super + BackSpace
	pkill -USR1 -x sxhkd

super + {_}{w,a,Return,e}
	{brave,st,kitty,emacsclient -c -a 'emacs'}

super + shift + {_}{d}
	{rofi -show drun}

alt + {_}{d,s,r,h,m,g}
	{discord,steam,dmenu_run,flatpak run com.heroicgameslauncher.hgl,prismlauncher,gimp}

alt + shift + {_}{p,Return}
	{pavucontrol,thunar}

ctrl + {_}{p}
	{flameshot gui}
#+end_src

* [[./user/wm/README.org][Link To Dwm Configuration Files]]
